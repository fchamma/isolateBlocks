{
"err1": "\nInput path does not exist or is not a file\n",
"err2": "\nLayout (metadata) path does not exist or is not a file\n",
"err3": "\nDestination folder does not exist\n",
"err4": "\nNo write permission on destination folder\n",
"err5": "\nidPosition (Position of UniqueID within each input string row) must be an integer > 0 \n",
"err6": "\nidBlock (Row # of main (header) block within layout) must be a positive integer\n",
"err7": "\nfileDelimiter (delimiter char for input string file) must be a single character\n",
"err8": "\nlayoutDelimiter (delimiter char for layout file) must be a single character\n",
"err9": "\nParsing error, row %d column %d: Invalid block name or wrong input string format\n",
"err10": "\nParsing error, row %d: Cannot assign UniqueID. Please check input file\n",
"helpDescription": "Isolates given input string file into individual blocks, based on a layout file\n",
"helpMsgFile": "Path of delimited file to be isolated",
"helpMsgLayout": "Path of delimited metadata file. Use one block layout per line, with field names separated by delimiters",
"helpMsgDest": "Destination folder where blocks will be written to. Defaults to the working directory",
"helpMsgFileDelim": "Character delimiter for main file. Defaults to ','. Pass argument WITHOUT quotes",
"helpMsgLayoutDelim": "Character delimiter for layout file. Defaults to ','. Pass argument WITHOUT quotes",
"helpMsgIdPos": "Position of record identifier (UniqueID) within each input string row. Defaults to '2' (second position)",
"helpMsgIdBlock": "Position of block with record identifier (UniqueID) within layout file. Defaults to '1' (first block), usually the header",
"helpMsgOverwrite": "Flag to silently overwrite output file for each block, if they already exist. If omitted, user will be prompted before any overwriting",
"helpMsgCountCheck": "Perform comparison between number of occurrences of each block name in input file and number of rows in output file",
"helpMsgVerb": "Increase output verbosity (mostly for code debugging)",
"helpMsgInputFolder": "Folder that contains files to be isolated. By default all .csv files will be read, unless an extension is specified",
"helpMsgOutfile": "Full qualified path for output file to be written, including extension",
"helpMsgHeader": "Name of the main (header) file, which should carry all uniqueIDs. You can pass more than one block name (space delimited) to define a writing order",
"helpMsgExtension": "Extension of the input files. All files within input folder with that extension will be read (default: csv)",
"checkOccInit": " [Warning] Number of blocks parsed differ from number of times block 'name' occurs in the input string for the following blocks: \n",
"checkOccFinal": "  This usually happens when block names are parsed as regular fields. You may want to check the layout (metadata) file.\n\n",
"owPrompt": "File %s already exists. Overwrite (y/n)? ",
"owDenied": "   File will not be overwritten",
"isolateSuccessAll": "\nAll blocks were isolated successfully!",
"isolateSuccess": "\nBlocks isolated successfully: %s",
"isolateSkippedAll": "\nFailed: all blocks were skipped",
"isolateSkipped": "Blocks skipped: %s",
"statusWritingFile": "   Writing block %s to disk... ",
"statusWritingFileConcat": "   Writing file to disk... ",
"statusWritingSuccess": "[OK]",
"statusIsolationStarted": "\nIsolation started...\n",
"statusConcatenationStarted": "\nConcatenation started...\n",
"statusConcatenationSuccess": "\nOutput file was generated successfully!",
"statusConcatenationFailed": "\nFAILED: Something went wrong when writing file to disk. Consider checking available space.",
"elapsedTime": "\n------- Time elapsed: %s seconds -------"
}
